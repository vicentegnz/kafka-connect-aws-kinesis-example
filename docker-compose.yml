version: '3.3'

services:
  # https://github.com/wurstmeister/zookeeper-docker
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - '2181:2181'
    networks:
      - custom-network

  # https://hub.docker.com/r/wurstmeister/kafka/
  kafka:
    container_name: kafka
    image: wurstmeister/kafka:2.13-2.8.1
    environment:
      ## the >- used below infers a value which is a string and properly
      ## ignore the multiple lines resulting in one long string:
      ## https://yaml.org/spec/1.2/spec.html  

      ## You need to make sure to specify your hostname in a file in this
      ## same dir as this compose file called `.env`(uncomment the line)
      ## or to register in your `/etc/hosts` kafka as your loopback interface
      ## address together with hostname and 127.0.0.1
      KAFKA_ADVERTISED_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://kafka:19092, LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-kafka}:9092

      KAFKA_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://:19092, LISTENER_DOCKER_EXTERNAL://:9092

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        LISTENER_DOCKER_INTERNAL:PLAINTEXT, LISTENER_DOCKER_EXTERNAL:PLAINTEXT

      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # we create topic with 1 partition and 1 replica as it's for local dev and we're running a single broker instance.
      KAFKA_CREATE_TOPICS: 'simple-connect:3:1'
      KAFKA_LOG4J_LOGGERS: >-
        kafka.controller=INFO, kafka.producer.async.DefaultEventHandler=INFO, state.change.logger=INFO
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - custom-network

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.0.3
    container_name: kafka-rest-proxy
    restart: always
    depends_on:
      - kafka
    ports:
      - "5324:8086"
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_LISTENERS: http://0.0.0.0:8086
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:19092
    networks:
      - custom-network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.4.0
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka
    ports:
      - "5223:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - custom-network

  kinesis:
    image: "localstack/localstack:latest"
    container_name: kinesis
    environment:
      EDGE_PORT: 4566
      SERVICES: kinesis
      AWS_DEFAULT_REGION: eu-west-1
      AWS_ACCESS_KEY_ID: FakeKey
      AWS_SECRET_ACCESS_KEY: FakeKey
      KINESIS_INITIALIZE_STREAMS: simple-connect-stream:1
    ports:
      - '4566-4583:4566-4583'
    depends_on:
      - kafka
    networks:
      - custom-network

  connect-output:
    build:
      context: ./distributed-connector
      dockerfile: Dockerfile
      args:
        ACCESS_KEY_ID: FakeKey
        SECRET_ACCESS_KEY: FakeKey
        SESSION_TOKEN: FakeKey
    deploy:
      replicas: 3
    ports:
      - "8083"
    depends_on:
      - kafka
    networks:
      - custom-network

  kinesis-consumer:
    build:
      context: ./kinesis-consumer
      dockerfile: Dockerfile
    container_name: kinesis-consumer
    depends_on:
      - kinesis
    networks:
      - custom-network

networks:
  custom-network:
    name: kinesis-poc
