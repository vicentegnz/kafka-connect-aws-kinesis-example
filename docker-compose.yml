version: '3.3'

services:
  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:3.8
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'
    networks:
      - custom-network

  kafka:
    container_name: kafka
    image: 'docker.io/bitnami/kafka:3.2'
    ports:
      - "5221:9092"
      - "5222:9093"
      - "5224:9094"
    environment:
      - BITNAMI_DEBUG=true
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - custom-network

  kafka-init:
    image: 'docker.io/bitnami/kafka:3.2'
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server $$SERVER --list
      echo 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server $$SERVER --create --if-not-exists --topic $$TOPIC --replication-factor 1 --partitions 3
      echo 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server $$SERVER --list
      "
    environment:
      SERVER: 'kafka:9092'
      TOPIC: 'simple-connect'
    networks:
      - custom-network

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.0.3
    container_name: kafka-rest-proxy
    restart: always
    depends_on:
      - kafka
    ports:
      - "5324:8086"
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_LISTENERS: http://0.0.0.0:8086
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - custom-network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.4.0
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka
    ports:
      - "5223:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - custom-network

  kinesis:
    image: "localstack/localstack:latest"
    container_name: kinesis
    environment:
      EDGE_PORT: 4566
      SERVICES: kinesis
      AWS_DEFAULT_REGION: eu-west-1
      AWS_ACCESS_KEY_ID: FakeKey
      AWS_SECRET_ACCESS_KEY: FakeKey
      KINESIS_INITIALIZE_STREAMS: simple-sink-connect-stream:1,simple-source-connect-stream:1
    ports:
      - '4566-4583:4566-4583'
    depends_on:
      - kafka
    networks:
      - custom-network

  source-kinesis-connector:
    container_name: source-kinesis-connector
    build:
      context: .
      dockerfile: distributed-source-connector/Dockerfile
    ports:
      - "8082:8083"
    depends_on:
      - kafka
    command: /opt/bitnami/kafka/bin/connect-distributed.sh opt/bitnami/kafka/config/connect-distributed.properties
    networks:
      - custom-network

  sink-kinesis-connector:
    container_name: sink-kinesis-connector
    build:
      context: .
      dockerfile: distributed-sink-connector/Dockerfile
    ports:
      - "8084:8083"
    depends_on:
      - kafka
    command: /opt/bitnami/kafka/bin/connect-distributed.sh opt/bitnami/kafka/config/connect-distributed.properties
    networks:
      - custom-network

  kinesis-producer:
    build:
      context: ./kinesis-producer
      dockerfile: Dockerfile
    container_name: kinesis-producer
    depends_on:
      - kinesis
    networks:
      - custom-network

  kinesis-consumer:
    build:
      context: ./kinesis-consumer
      dockerfile: Dockerfile
    container_name: kinesis-consumer
    depends_on:
      - kinesis
    networks:
      - custom-network

networks:
  custom-network:
    name: kinesis-poc
